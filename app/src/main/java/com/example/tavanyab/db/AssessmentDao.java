package com.example.tavanyab.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSESSMENT".
*/
public class AssessmentDao extends AbstractDao<Assessment, Long> {

    public static final String TABLENAME = "ASSESSMENT";

    /**
     * Properties of entity Assessment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Assessment_id = new Property(1, int.class, "assessment_id", false, "ASSESSMENT_ID");
        public final static Property Letter_name = new Property(2, String.class, "letter_name", false, "LETTER_NAME");
        public final static Property First_name = new Property(3, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Middle_name = new Property(4, String.class, "middle_name", false, "MIDDLE_NAME");
        public final static Property Last_name = new Property(5, String.class, "last_name", false, "LAST_NAME");
        public final static Property First_icon = new Property(6, String.class, "first_icon", false, "FIRST_ICON");
        public final static Property Middle_icon = new Property(7, String.class, "middle_icon", false, "MIDDLE_ICON");
        public final static Property Last_icon = new Property(8, String.class, "last_icon", false, "LAST_ICON");
    }


    public AssessmentDao(DaoConfig config) {
        super(config);
    }
    
    public AssessmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSESSMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ASSESSMENT_ID\" INTEGER NOT NULL ," + // 1: assessment_id
                "\"LETTER_NAME\" TEXT," + // 2: letter_name
                "\"FIRST_NAME\" TEXT," + // 3: first_name
                "\"MIDDLE_NAME\" TEXT," + // 4: middle_name
                "\"LAST_NAME\" TEXT," + // 5: last_name
                "\"FIRST_ICON\" TEXT," + // 6: first_icon
                "\"MIDDLE_ICON\" TEXT," + // 7: middle_icon
                "\"LAST_ICON\" TEXT);"); // 8: last_icon
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSESSMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Assessment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAssessment_id());
 
        String letter_name = entity.getLetter_name();
        if (letter_name != null) {
            stmt.bindString(3, letter_name);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(4, first_name);
        }
 
        String middle_name = entity.getMiddle_name();
        if (middle_name != null) {
            stmt.bindString(5, middle_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(6, last_name);
        }
 
        String first_icon = entity.getFirst_icon();
        if (first_icon != null) {
            stmt.bindString(7, first_icon);
        }
 
        String middle_icon = entity.getMiddle_icon();
        if (middle_icon != null) {
            stmt.bindString(8, middle_icon);
        }
 
        String last_icon = entity.getLast_icon();
        if (last_icon != null) {
            stmt.bindString(9, last_icon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Assessment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAssessment_id());
 
        String letter_name = entity.getLetter_name();
        if (letter_name != null) {
            stmt.bindString(3, letter_name);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(4, first_name);
        }
 
        String middle_name = entity.getMiddle_name();
        if (middle_name != null) {
            stmt.bindString(5, middle_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(6, last_name);
        }
 
        String first_icon = entity.getFirst_icon();
        if (first_icon != null) {
            stmt.bindString(7, first_icon);
        }
 
        String middle_icon = entity.getMiddle_icon();
        if (middle_icon != null) {
            stmt.bindString(8, middle_icon);
        }
 
        String last_icon = entity.getLast_icon();
        if (last_icon != null) {
            stmt.bindString(9, last_icon);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Assessment readEntity(Cursor cursor, int offset) {
        Assessment entity = new Assessment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // assessment_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // letter_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // first_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // middle_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // last_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // first_icon
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // middle_icon
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // last_icon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Assessment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAssessment_id(cursor.getInt(offset + 1));
        entity.setLetter_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirst_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMiddle_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLast_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFirst_icon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMiddle_icon(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLast_icon(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Assessment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Assessment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Assessment entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
