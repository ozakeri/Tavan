package com.example.tavanyab.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD".
*/
public class ChildDao extends AbstractDao<Child, Long> {

    public static final String TABLENAME = "CHILD";

    /**
     * Properties of entity Child.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Child_id = new Property(1, int.class, "child_id", false, "CHILD_ID");
        public final static Property First_name = new Property(2, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Last_name = new Property(3, String.class, "last_name", false, "LAST_NAME");
        public final static Property Birth_date = new Property(4, String.class, "birth_date", false, "BIRTH_DATE");
        public final static Property Date_creation = new Property(5, String.class, "date_creation", false, "DATE_CREATION");
    }


    public ChildDao(DaoConfig config) {
        super(config);
    }
    
    public ChildDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHILD_ID\" INTEGER NOT NULL ," + // 1: child_id
                "\"FIRST_NAME\" TEXT," + // 2: first_name
                "\"LAST_NAME\" TEXT," + // 3: last_name
                "\"BIRTH_DATE\" TEXT," + // 4: birth_date
                "\"DATE_CREATION\" TEXT);"); // 5: date_creation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Child entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getChild_id());
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(3, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(4, last_name);
        }
 
        String birth_date = entity.getBirth_date();
        if (birth_date != null) {
            stmt.bindString(5, birth_date);
        }
 
        String date_creation = entity.getDate_creation();
        if (date_creation != null) {
            stmt.bindString(6, date_creation);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Child entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getChild_id());
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(3, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(4, last_name);
        }
 
        String birth_date = entity.getBirth_date();
        if (birth_date != null) {
            stmt.bindString(5, birth_date);
        }
 
        String date_creation = entity.getDate_creation();
        if (date_creation != null) {
            stmt.bindString(6, date_creation);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Child readEntity(Cursor cursor, int offset) {
        Child entity = new Child( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // child_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // first_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // last_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birth_date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // date_creation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Child entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChild_id(cursor.getInt(offset + 1));
        entity.setFirst_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLast_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirth_date(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate_creation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Child entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Child entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Child entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
