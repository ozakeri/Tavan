package com.example.tavanyab.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESULT".
*/
public class ResultDao extends AbstractDao<Result, Long> {

    public static final String TABLENAME = "RESULT";

    /**
     * Properties of entity Result.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Res_id = new Property(1, int.class, "res_id", false, "RES_ID");
        public final static Property Child_id = new Property(2, int.class, "child_id", false, "CHILD_ID");
        public final static Property Letter_name = new Property(3, String.class, "letter_name", false, "LETTER_NAME");
        public final static Property First_res = new Property(4, Boolean.class, "first_res", false, "FIRST_RES");
        public final static Property Middle_res = new Property(5, Boolean.class, "middle_res", false, "MIDDLE_RES");
        public final static Property Last_res = new Property(6, Boolean.class, "last_res", false, "LAST_RES");
        public final static Property Irritability = new Property(7, Boolean.class, "irritability", false, "IRRITABILITY");
        public final static Property Note = new Property(8, String.class, "note", false, "NOTE");
    }


    public ResultDao(DaoConfig config) {
        super(config);
    }
    
    public ResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RES_ID\" INTEGER NOT NULL ," + // 1: res_id
                "\"CHILD_ID\" INTEGER NOT NULL ," + // 2: child_id
                "\"LETTER_NAME\" TEXT," + // 3: letter_name
                "\"FIRST_RES\" INTEGER," + // 4: first_res
                "\"MIDDLE_RES\" INTEGER," + // 5: middle_res
                "\"LAST_RES\" INTEGER," + // 6: last_res
                "\"IRRITABILITY\" INTEGER," + // 7: irritability
                "\"NOTE\" TEXT);"); // 8: note
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Result entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRes_id());
        stmt.bindLong(3, entity.getChild_id());
 
        String letter_name = entity.getLetter_name();
        if (letter_name != null) {
            stmt.bindString(4, letter_name);
        }
 
        Boolean first_res = entity.getFirst_res();
        if (first_res != null) {
            stmt.bindLong(5, first_res ? 1L: 0L);
        }
 
        Boolean middle_res = entity.getMiddle_res();
        if (middle_res != null) {
            stmt.bindLong(6, middle_res ? 1L: 0L);
        }
 
        Boolean last_res = entity.getLast_res();
        if (last_res != null) {
            stmt.bindLong(7, last_res ? 1L: 0L);
        }
 
        Boolean irritability = entity.getIrritability();
        if (irritability != null) {
            stmt.bindLong(8, irritability ? 1L: 0L);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(9, note);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Result entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRes_id());
        stmt.bindLong(3, entity.getChild_id());
 
        String letter_name = entity.getLetter_name();
        if (letter_name != null) {
            stmt.bindString(4, letter_name);
        }
 
        Boolean first_res = entity.getFirst_res();
        if (first_res != null) {
            stmt.bindLong(5, first_res ? 1L: 0L);
        }
 
        Boolean middle_res = entity.getMiddle_res();
        if (middle_res != null) {
            stmt.bindLong(6, middle_res ? 1L: 0L);
        }
 
        Boolean last_res = entity.getLast_res();
        if (last_res != null) {
            stmt.bindLong(7, last_res ? 1L: 0L);
        }
 
        Boolean irritability = entity.getIrritability();
        if (irritability != null) {
            stmt.bindLong(8, irritability ? 1L: 0L);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(9, note);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Result readEntity(Cursor cursor, int offset) {
        Result entity = new Result( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // res_id
            cursor.getInt(offset + 2), // child_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // letter_name
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // first_res
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // middle_res
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // last_res
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // irritability
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // note
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Result entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRes_id(cursor.getInt(offset + 1));
        entity.setChild_id(cursor.getInt(offset + 2));
        entity.setLetter_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirst_res(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setMiddle_res(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setLast_res(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIrritability(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setNote(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Result entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Result entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Result entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
